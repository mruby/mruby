---
# https://pre-commit.com/
default_stages: [pre-commit, pre-push]
default_language_version:
  python: python3
  node: 22.19.0
minimum_pre_commit_version: "3.2.0"
exclude: "^tools/lrama/"
repos:
  - repo: meta
    hooks:
      - id: identity
        name: run identity
        description: check your identity
      - id: check-hooks-apply
        name: run check-hooks-apply
        description: check hooks apply to the repository
  - repo: local
    hooks:
      - id: pre-commit-hook-validator
        name: run pre-commit hook validator
        description: Validates a pre-commit-config.yaml file to ensure all hooks have 'name' and 'description' keys
        entry: scripts/pre_commit_hooks_validator.py
        language: python
        additional_dependencies:
          - pyyaml
        files: ^\.pre-commit-config\.yaml$ # Only run this hook against the config file itself
        pass_filenames: false # Crucial: Don't pass the filename as an argument. Your script will default.
        # Alternatively, if you want to pass the filename, you'd need:
        # entry: python validate_pre_commit_hooks.py .pre-commit-config.yaml
        # args: ['.pre-commit-config.yaml']
        # pass_filenames: false
        require_serial: true
      - id: create-pre-commit-docs
        name: create pre-commit docs
        description: creates a Markdown file with information on the pre-commit hooks
        entry: scripts/create_pre_commit_docs.py
        language: python
        additional_dependencies:
          - pyyaml
        files: ^\.pre-commit-config\.yaml$
        pass_filenames: false
        require_serial: true
      - id: prettier
        name: run prettier
        description: format files with prettier
        entry: prettier --write '**/*.json' '**/*.md' '**/*.yaml' '**/*.yml'
        files: \.(json|md|ya?ml)$
        language: node
        additional_dependencies: ["prettier@3.6.2"]
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.28.0
    hooks:
      - id: gitleaks
        name: run gitleaks
        description: detect hardcoded secrets with gitleaks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: check-added-large-files
        name: check added large files
        description: Prevent giant files from being committed
      - id: check-case-conflict
        name: check case conflict
        description: Check for files with names that would conflict on a case-insensitive filesystem like MacOS HFS+ or Windows FAT
      - id: check-executables-have-shebangs
        name: check executables have shebangs
        description: Checks that non-binary executables have a proper shebang
        exclude: ^test/t/lang\.rb$
      - id: check-illegal-windows-names
        name: check illegal windows names
        description: Check for files that cannot be created on Windows
      - id: pretty-format-json
        name: pretty format json
        description: Checks that all your JSON files are pretty
        args: [--autofix, --no-sort-keys]
      - id: check-json
        name: check json
        description: Attempts to load all json files to verify syntax
      - id: check-merge-conflict
        name: check merge conflict
        description: Check for files that contain merge conflict strings
      - id: check-shebang-scripts-are-executable
        name: check shebang scripts are executable
        description: Checks that scripts with shebangs are executable
      - id: check-vcs-permalinks
        name: check vcs permalinks
        description: Ensures that links to vcs websites are permalinks
      - id: check-yaml
        name: check yaml
        description: Attempts to load all yaml files to verify syntax
      - id: destroyed-symlinks
        name: destroyed symlinks
        description: Detects symlinks which are changed to regular files with a content of a path which that symlink was pointing to
      - id: detect-aws-credentials
        name: detect aws credentials
        description: Checks for the existence of AWS secrets that you have set up with the AWS CLI
        args: [--allow-missing-credentials]
      - id: detect-private-key
        name: detect private key
        description: Checks for the existence of private keys
      - id: end-of-file-fixer
        name: end of file fixer
        description: Makes sure files end in a newline and only a newline
      - id: file-contents-sorter
        name: file contents sorter
        description: Sort the lines in specified files (defaults to alphabetical)
        args: [--unique]
        files: ^\.github/linters/codespell\.txt$
      - id: fix-byte-order-marker
        name: fix byte order marker
        description: Removes UTF-8 byte order marker
      - id: forbid-submodules
        name: forbid submodules
        description: Prevent addition of new git submodules
      - id: mixed-line-ending
        name: mixed line ending
        description: Replaces or checks mixed line ending
      - id: trailing-whitespace
        name: trailing whitespace
        description: Trims trailing whitespace
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.5
    hooks:
      - id: forbid-tabs
        name: run no-tabs checker
        description: check the codebase for tabs
        exclude: Makefile$
      - id: remove-tabs
        name: run tabs remover
        description: find and convert tabs to spaces
        args: [--whitespaces-count, "2"]
        exclude: Makefile$
  - repo: https://github.com/rhysd/actionlint
    rev: v1.7.7
    hooks:
      - id: actionlint
        name: run actionlint
        description: lint GitHub Actions workflow files
  - repo: https://github.com/codespell-project/codespell
    rev: v2.4.1
    hooks:
      - id: codespell
        name: run codespell
        description: check spelling with codespell
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.45.0
    hooks:
      - id: markdownlint
        name: run markdownlint
        description: checks the style of Markdown files
        args: [--config=.github/linters/.markdown-lint.yml]
        types: [markdown]
        files: \.md$
  - repo: https://github.com/tcort/markdown-link-check
    rev: v3.13.7
    hooks:
      - id: markdown-link-check
        name: run markdown-link-check
        description: checks hyperlinks in Markdown files
        args: [--config=.github/linters/mlc_config.json, -q]
        types: [markdown]
        files: \.md$
  - repo: https://github.com/rubocop/rubocop
    rev: v1.80.2
    hooks:
      - id: rubocop
        name: run rubocop
        description: RuboCop is a Ruby code style checker (linter) and formatter based on the community-driven Ruby Style Guide
        exclude: ^test/t/syntax\.rb$
        args: [--config=.github/linters/.rubocop.yml]
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.11.0.1
    hooks:
      - id: shellcheck
        name: run shellcheck
        description: check shell scripts with a static analysis tool
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.37.1
    hooks:
      - id: yamllint
        name: run yamllint
        description: check YAML files with yamllint
        args: [--strict, -c=.github/linters/.yaml-lint.yml]
        types: [yaml]
        files: \.ya?ml$
