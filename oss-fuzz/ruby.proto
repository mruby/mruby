syntax = "proto2";

package ruby_fuzzer;

message VarRef {
  required int32 varnum = 1;
}

message ArrType {
  repeated Const elements = 1;
}

message KVPair {
  required string key = 1;
  required string val = 2;
}

message HashType {
  repeated KVPair keyvals = 1;
}

message StringExtNoArg {
  enum StrExtOp {
    STR_EXT_OP_DUMP_UNSPECIFIED = 0;
    STR_EXT_OP_STRIP = 1;
    STR_EXT_OP_LSTRIP = 2;
    STR_EXT_OP_RSTRIP = 3;
    STR_EXT_OP_STRIPE = 4;
    STR_EXT_OP_LSTRIPE = 5;
    STR_EXT_OP_RSTRIPE = 6;
    STR_EXT_OP_SWAPCASE = 7;
    STR_EXT_OP_SWAPCASEE = 8;
    STR_EXT_OP_SQUEEZE = 9;
  }
  required StrExtOp str_op = 1;
  required string str_arg = 2;
}

message MathConst {
  enum MathConstLit {
    MATH_CONST_LIT_PI_UNSPECIFIED = 0;
    MATH_CONST_LIT_E = 1;
  }
  required MathConstLit math_const = 1;
}

message Const {
  oneof const_oneof {
    uint32 int_lit = 1;
    bool bool_val = 4;
  }
}

message BinaryOp {
  enum Op {
    OP_ADD_UNSPECIFIED = 0;
    OP_SUB = 1;
    OP_MUL = 2;
    OP_DIV = 3;
    OP_MOD = 4;
    OP_XOR = 5;
    OP_AND = 6;
    OP_OR = 7;
    OP_EQ = 8;
    OP_NE = 9;
    OP_LE = 10;
    OP_GE = 11;
    OP_LT = 12;
    OP_GT = 13;
    OP_RS = 14;
  };
  required Op op = 1;
  required Rvalue left = 2;
  required Rvalue right = 3;
}

message Rvalue {
  oneof rvalue_oneof {
    VarRef varref = 1;
    Const cons = 2;
    BinaryOp binop = 3;
  }
}

message AssignmentStatement {
  required Rvalue rvalue = 2;
}

message IfElse {
  required Rvalue cond = 1;
  required StatementSeq if_body = 2;
  required StatementSeq else_body = 3;
}

//TODO: Add Switch statement
//message Switch {
//  required Rvalue switch_var = 1;
//  repeated Rvalue cond = 2;
//}

message Ternary {
  required Rvalue tern_cond = 1;
  required Rvalue t_branch = 2;
  required Rvalue f_branch = 3;
}

message ObjectSpace {
  enum OSMethods {
    OS_METHODS_COUNT = 1;
  }
  required OSMethods os_func = 1;
  required HashType os_arg = 2;
}

message Time {
  enum TMethods {
    TMETHODS_AT = 1;
    TMETHODS_GM = 2;
  }
  required TMethods t_func = 1;
  required uint32 t_arg = 2;
}

message Array {
  enum ArrMethods {
    ARR_METHODS_FLATTEN = 1;
    ARR_METHODS_COMPACT = 2;
    ARR_METHODS_FETCH = 3;
    ARR_METHODS_FILL = 4;
    ARR_METHODS_ROTATE = 5;
    ARR_METHODS_ROTATE_E = 6;
    ARR_METHODS_DELETEIF = 7;
    ARR_METHODS_INSERT = 8;
    ARR_METHODS_BSEARCH = 9;
    ARR_METHODS_KEEPIF = 10;
    ARR_METHODS_SELECT = 11;
    ARR_METHODS_VALUES_AT = 12;
    ARR_METHODS_BLOCK = 13;
    ARR_METHODS_DIG = 14;
    ARR_METHODS_SLICE = 15;
    ARR_METHODS_PERM = 16;
    ARR_METHODS_COMB = 17;
    ARR_METHODS_ASSOC = 18;
    ARR_METHODS_RASSOC = 19;
  }
  required ArrMethods arr_func = 1;
  required ArrType  arr_arg = 2;
  required Rvalue   val_arg = 3;
}

message MathType {
  oneof math_arg_oneof {
    Rvalue math_rval = 2;
    MathConst math_const = 3;
  }
}

message MathOps {
  enum Mops {
    MOPS_CBRT = 1;
    MOPS_COS = 2;
    MOPS_ERF = 3;
    MOPS_ERFC = 4;
    MOPS_LOG = 5;
    MOPS_LOG10 = 6;
    MOPS_LOG2 = 7;
    MOPS_SIN = 8;
    MOPS_SQRT = 9;
    MOPS_TAN = 10;
  }
  required Mops math_op = 1;
  required MathType math_arg = 2;
}

message BuiltinFuncs {
  oneof bifunc_oneof {
    ObjectSpace os = 1;
    Time time = 2;
    Array arr = 3;
    MathOps mops = 4;
  }
}

message Statement {
  oneof stmt_oneof {
    AssignmentStatement assignment = 1;
    IfElse              ifelse     = 2;
    Ternary             ternary_stmt = 3;
    BuiltinFuncs        builtins = 4;
    StatementSeq        blockstmt = 5;
  }
}

message StatementSeq {
  repeated Statement statements = 1;
}

message Function {
  required StatementSeq statements = 1;
}
